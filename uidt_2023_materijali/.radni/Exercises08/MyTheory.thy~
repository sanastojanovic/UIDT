
(*<*)
theory MyTheory
    imports Main
begin
(*>*)

text_raw \<open>\begin{exercise}[subtitle=Alternirajuća suma neparnih prirodnih brojeva]\<close>

text \<open>Pokazati da važi:\<close>

text_raw \<open>$$ - 1 + 3 - 5 + \ldots + (- 1)^n (2n - 1) = (- 1)^n n.$$\<close>

text \<open>Primitivnom rekurzijom definisati funkciju \<open>alternirajuca_suma :: "nat \<Rightarrow> int"\<close> 
      koja računa alternirajucu sumu neparnih brojeva od \<open>1\<close> do \<open>2n - 1\<close>, 
      tj. definisati funkciju koja računa levu stranu jednakosti.\<close>

(*
 * 0   1   2   3   4            n
 * 0 - 1 + 3 - 5 + 7 + ... + (-1)^n (2n - 1) = (-1)^n*n. 
 *)

primrec alternirajuca_suma :: "nat \<Rightarrow> int" where
  "alternirajuca_suma 0 = 0"
| "alternirajuca_suma (Suc n) = alternirajuca_suma n + (-1)^(Suc n) * (2 * int (Suc n) - 1)"

text \<open>Proveriti vrednost funkcije \<open>alternirajuca_suma\<close> za proizvoljan prirodni broj.\<close>

value "alternirajuca_suma 6"

text \<open>Dokazati sledeću lemu induckijom koristeći metode za automatsko dokazivanje.\<close>

lemma "alternirajuca_suma n = (-1)^n * int n"
  by (induction n) (auto simp add: algebra_simps)

text \<open>Dokazati sledeću lemu indukcijom raspisivanjem detaljnog Isar dokaza.\<close>

lemma "alternirajuca_suma n = (-1)^n * int n"
proof (induction n)
  case 0
  then show ?case by simp
next
  case (Suc n)
  have "alternirajuca_suma (Suc n) = alternirajuca_suma n + (-1)^(Suc n) * (2 * int (Suc n) - 1)"
    by (rule alternirajuca_suma.simps(2))
  also have "... = (-1)^n * int n + (-1)^(Suc n) * (2 * int (Suc n) - 1)" 
    using Suc by simp
  also have "... = 2 * (-1)^(Suc n) * int (Suc n) - (-1)^(Suc n) - (-1)^(Suc n) * int n"
    by (simp add: algebra_simps)
  also have "... = (-1)^(Suc n) * int n + (-1)^(Suc n)"
    by (simp add: algebra_simps)
  also have "... = (-1)^(Suc n) * int (Suc n)"
    by (simp add: algebra_simps)
  finally show ?case .
qed

text_raw \<open>\end{exercise}\<close>

text_raw \<open>\begin{exercise}[subtitle=Množenje matrica]\<close>

text \<open>Pokazati da važi sledeća jednakost:\<close>

text_raw 
\<open>$$
\begin{pmatrix}
1 & 1\\
0 & 1
\end{pmatrix}^n
=
\begin{pmatrix}
1 & n\\
0 & 1
\end{pmatrix},
n \in \mathbb{N}.
$$\<close>

text \<open>Definisati tip \<open>mat2\<close> koji predstavlja jednu \<open>2\<times>2\<close> matricu prirodnih brojeva.
      Tip \<open>mat2\<close> definisati kao skraćenicu uređene četvorke prirodnih brojeva.
      Uređena četvorka odgovara \<open>2\<times>2\<close> matrici kao\<close>

text_raw 
\<open>$$
(a, b, c, d) \equiv
\begin{pmatrix}
a & b\\
c & d
\end{pmatrix}.
$$\<close>

type_synonym mat2 = "nat \<times> nat \<times> nat \<times> nat"
term "(1, 1, 0, 1)::mat2"

text \<open>Definisati konstantu \<open>eye :: mat2\<close>, koja predstavlja jediničnu matricu.\<close>

definition eye :: mat2 where
  "eye \<equiv> (1, 0, 0, 1)"

text \<open>Definisati funkciju \<open>mat_mul :: mat2 \<Rightarrow> mat2 \<Rightarrow> mat2\<close>, koja množi dve matrice.\<close>

fun mat_mul :: "mat2 \<Rightarrow> mat2 \<Rightarrow> mat2" where
  "mat_mul (a1, b1, c1, d1) (a2, b2, c2, d2) = 
    (a1*a2 + b1*c2, a1*b2 + b1*d2,
     c1*a2 + d1*c2, c1*b2 + d1*d2)"

text \<open>Definisati funkciju \<open>mat_pow :: mat2 \<Rightarrow> nat \<Rightarrow> mat2\<close>, koja stepenuje matricu.\<close>

fun mat_pow :: "mat2 \<Rightarrow> nat \<Rightarrow> mat2" where
  "mat_pow M 0 = eye"
| "mat_pow M (Suc n) = mat_mul M (mat_pow M n)"

text \<open>Dokazati sledeću lemu koristeći metode za automatsko dokazivanje.\<close>

lemma "mat_pow (1, 1, 0, 1) n = (1, n, 0, 1)"
  by (induction n) (auto simp add: eye_def)

text \<open>Dokazati sledeću lemu indukcijom raspisivanjem detaljnog Isar dokaza.\<close>

lemma "mat_pow (1, 1, 0, 1) n = (1, n, 0, 1)"
proof (induction n)
  case 0
  then show ?case
    by (simp add: eye_def)
next
  case (Suc n)
  then show ?case
  proof -
    have "mat_pow (1, 1, 0, 1) (Suc n) = mat_mul (1, 1, 0, 1) 
                                                 (mat_pow (1, 1, 0, 1) n)" 
      by (simp only: mat_pow.simps(2))
    also have "... = mat_mul (1, 1, 0, 1) (1, n, 0, 1)"
      by (simp only: Suc)
    also have "... = (1, n + 1, 0, 1)" by simp
    also have "... = (1, Suc n, 0, 1)" by simp
    finally show ?thesis .
  qed
qed

text_raw \<open>\end{exercise}\<close>

text_raw \<open>\begin{exercise}[subtitle=Deljivost]\<close>

text \<open>Pokazati sledeću lemu.\\
      \<open>Savet\<close>: Obrisati \<open>One_nat_def\<close> i \<open>algebra_simps\<close> iz \<open>simp\<close>-a u 
      finalnom koraku dokaza.\<close>

lemma 
  fixes n::nat
  shows "(6::nat) dvd n * (n + 1) * (2 * n + 1)"
proof (induction n)
  case 0
  then show ?case 
    by simp
next
  case (Suc n)
  then show ?case
  proof -
    note [simp] = algebra_simps
    have "Suc n * (Suc n + 1) * (2 * Suc n + 1) = (n + 1) * (n + 2) * (2 * (n + 1) + 1)" by simp
    also have "... = (n + 1) * (n + 2) * (2 * n + 3)" by simp
    also have "... = n * (n + 1) * (2 * n + 3) + 2 * (n + 1) * (2 * n + 3)" by simp
    also have "... = n * (n + 1) * (2 * n + 1) + 2 * n * (n + 1) + 2 * (n + 1) * (2 * n + 3)" by simp
    also have "... = n * (n + 1) * (2 * n + 1) + 2 * (n + 1) * (3 * n + 3)" by simp
    also have "... = n * (n + 1) * (2 * n + 1) + 6 * (n + 1) * (n + 1)" by simp
    finally show ?thesis
      using Suc
      by (simp del: algebra_simps One_nat_def)
  qed
qed

text_raw \<open>\end{exercise}\<close>

text_raw \<open>\begin{exercise}[subtitle=Nejednakost]\<close>

text \<open>Pokazati da za svaki prirodan broj \<open>n > 2\<close> važi \<open>n\<^sup>2 > 2 * n + 1\<close>.\\
     \<open>Savet\<close>: Iskoristiti \<open>nat_induct_at_least\<close> kao pravilo indukcije i 
              lemu \<open>power2_eq_square\<close>.\<close>

thm nat_induct_at_least
thm power2_eq_square

lemma n2_2n:
  fixes n::nat
  assumes "n \<ge> 3"
  shows "n\<^sup>2 > 2 * n + 1"
  using assms
proof (induction n rule: nat_induct_at_least)
  case base
  then show ?case by simp
next
  case (Suc n)
  have "2 * Suc n + 1 < 2 * (Suc n) + 2 * n"
    using \<open>n \<ge> 3\<close> by simp
  also have "... = 2 * n + 1 + 2 * n + 1"
    by simp
  also have "... < n\<^sup>2 + 2 * n + 1"
    using Suc by simp
  also have "... = (Suc n)\<^sup>2"
    by (simp add: power2_eq_square)
  finally show ?case .
qed

text_raw \<open>\end{exercise}\<close>

(*<*)
end
(*>*)
